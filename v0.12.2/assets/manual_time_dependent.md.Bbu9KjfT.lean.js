import{_ as l,c as o,a5 as e,j as i,a,G as t,B as p,o as r}from"./chunks/framework.fPm9F4bo.js";const v=JSON.parse('{"title":"Time evolution","description":"","frontmatter":{},"headers":[],"relativePath":"manual/time_dependent.md","filePath":"manual/time_dependent.md"}'),h={name:"manual/time_dependent.md"},d={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""};function E(u,s,g,m,y,b){const n=p("Badge");return r(),o("div",null,[s[9]||(s[9]=e('<h1 id="Time-evolution" tabindex="-1">Time evolution <a class="header-anchor" href="#Time-evolution" aria-label="Permalink to &quot;Time evolution {#Time-evolution}&quot;">​</a></h1><p>Generally, solving the ODE of oscillatory systems in time requires numerically tracking the oscillations. This is a computationally expensive process; however, using the harmonic ansatz removes the oscillatory time-dependence. Simulating instead the harmonic variables of a <code>HarmonicEquation</code> is vastly more efficient - a steady state of the system appears as a fixed point in multidimensional space rather than an oscillatory function.</p><p>The extension <code>TimeEvolution</code> is used to interface <code>HarmonicEquation</code> with the solvers contained in <code>OrdinaryDiffEq.jl</code>. Time-dependent parameter sweeps are defined using the object <code>AdiabaticSweep</code>. To use the <code>TimeEvolution</code> extension, one must first load the <code>OrdinaryDiffEq.jl</code> package.</p>',3)),i("details",d,[i("summary",null,[s[0]||(s[0]=i("a",{id:"SciMLBase.ODEProblem-Tuple{HarmonicEquation, Any}",href:"#SciMLBase.ODEProblem-Tuple{HarmonicEquation, Any}"},[i("span",{class:"jlbinding"},"SciMLBase.ODEProblem")],-1)),s[1]||(s[1]=a()),t(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[2]||(s[2]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ODEProblem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        eom</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HarmonicEquation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fixed_parameters,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        u0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sweep</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AdiabaticSweep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        timespan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span></code></pre></div><p>Creates an ODEProblem object used by OrdinaryDiffEqTsit5.jl from the equations in <code>eom</code> to simulate time-evolution within <code>timespan</code>. <code>fixed_parameters</code> must be a dictionary mapping parameters+variables to numbers (possible to use a solution index, e.g. solutions[x][y] for branch y of solution x). If <code>u0</code> is specified, it is used as an initial condition; otherwise the values from <code>fixed_parameters</code> are used.</p><p><a href="https://github.com/NonlinearOscillations/HarmonicBalance.jl/blob/ab10c6561a85e9460f9933831e9af5e83f423430/ext/TimeEvolution/ODEProblem.jl#L3-L15" target="_blank" rel="noreferrer">source</a></p>`,3))]),s[10]||(s[10]=i("div",{class:"warning custom-block"},[i("p",{class:"custom-block-title"},"Missing docstring."),i("p",null,[a("Missing docstring for "),i("code",null,"AdiabaticSweep"),a(". Check Documenter's build log for details.")])],-1)),s[11]||(s[11]=i("h2",{id:"plotting",tabindex:"-1"},[a("Plotting "),i("a",{class:"header-anchor",href:"#plotting","aria-label":'Permalink to "Plotting"'},"​")],-1)),i("details",c,[i("summary",null,[s[3]||(s[3]=i("a",{id:"RecipesBase.plot-Tuple{ODESolution, Any, HarmonicEquation}",href:"#RecipesBase.plot-Tuple{ODESolution, Any, HarmonicEquation}"},[i("span",{class:"jlbinding"},"RecipesBase.plot")],-1)),s[4]||(s[4]=a()),t(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[5]||(s[5]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(soln</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ODESolution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, harm_eq</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HarmonicEquation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plot a function <code>f</code> of a time-dependent solution <code>soln</code> of <code>harm_eq</code>.</p><p><strong>As a function of time</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>plot(soln::ODESolution, f::String, harm_eq::HarmonicEquation; kwargs...)</span></span></code></pre></div><p><code>f</code> is parsed by Symbolics.jl</p><p><strong>parametric plots</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>plot(soln::ODESolution, f::Vector{String}, harm_eq::HarmonicEquation; kwargs...)</span></span></code></pre></div><p>Parametric plot of f[1] against f[2]</p><p>Also callable as plot!</p><p><a href="https://github.com/NonlinearOscillations/HarmonicBalance.jl/blob/ab10c6561a85e9460f9933831e9af5e83f423430/ext/TimeEvolution/plotting.jl#L4-L22" target="_blank" rel="noreferrer">source</a></p>',10))]),s[12]||(s[12]=i("h2",{id:"miscellaneous",tabindex:"-1"},[a("Miscellaneous "),i("a",{class:"header-anchor",href:"#miscellaneous","aria-label":'Permalink to "Miscellaneous"'},"​")],-1)),s[13]||(s[13]=i("p",null,"Using a time-dependent simulation can verify solution stability in cases where the Jacobian is too expensive to compute.",-1)),i("details",k,[i("summary",null,[s[6]||(s[6]=i("a",{id:"HarmonicBalance.is_stable",href:"#HarmonicBalance.is_stable"},[i("span",{class:"jlbinding"},"HarmonicBalance.is_stable")],-1)),s[7]||(s[7]=a()),t(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[8]||(s[8]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">is_stable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    soln</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OrderedCollections.OrderedDict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    eom</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HarmonicEquation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timespan,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tol,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    perturb_initial</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Numerically investigate the stability of a solution <code>soln</code> of <code>eom</code> within <code>timespan</code>. The initial condition is displaced by <code>perturb_initial</code>.</p><p>Return <code>true</code> the solution evolves within <code>tol</code> of the initial value (interpreted as stable).</p><p><a href="https://github.com/NonlinearOscillations/HarmonicBalance.jl/blob/ab10c6561a85e9460f9933831e9af5e83f423430/ext/TimeEvolution/ODEProblem.jl#L67" target="_blank" rel="noreferrer">source</a></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">is_stable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    soln</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OrderedCollections.OrderedDict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HarmonicBalance.Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Any</span></span></code></pre></div><p>Returns true if the solution <code>soln</code> of the Result <code>res</code> is stable. Stable solutions are real and have all Jacobian eigenvalues Re(λ) &lt;= 0. <code>im_tol</code> : an absolute threshold to distinguish real/complex numbers. <code>rel_tol</code>: Re(λ) considered &lt;=0 if real.(λ) &lt; rel_tol*abs(λmax)</p><p><a href="https://github.com/NonlinearOscillations/HarmonicBalance.jl/blob/ab10c6561a85e9460f9933831e9af5e83f423430/src/classification.jl#L77" target="_blank" rel="noreferrer">source</a></p>`,7))])])}const C=l(h,[["render",E]]);export{v as __pageData,C as default};
